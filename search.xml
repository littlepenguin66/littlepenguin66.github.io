<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python打包成.exe</title>
      <link href="/%E6%9D%82%E5%AD%A6/python%E6%89%93%E5%8C%85%E6%88%90.exe/"/>
      <url>/%E6%9D%82%E5%AD%A6/python%E6%89%93%E5%8C%85%E6%88%90.exe/</url>
      
        <content type="html"><![CDATA[<h1 id="在-Python-开发中将脚本打包成可执行文件（-exe）"><a href="#在-Python-开发中将脚本打包成可执行文件（-exe）" class="headerlink" title="在 Python 开发中将脚本打包成可执行文件（.exe）"></a>在 Python 开发中将脚本打包成可执行文件（.exe）</h1><p>在 Python 开发中，将 Python 脚本打包成可执行文件（.exe）是一种常见需求。这样做可以使程序在没有安装 Python 解释器的环境下运行，同时也方便了程序的发布和分发。本文将介绍几种常见的方法来将 Python 代码打包成可执行文件。</p><h2 id="一、使用-pyinstaller-打包"><a href="#一、使用-pyinstaller-打包" class="headerlink" title="一、使用 pyinstaller 打包"></a>一、使用 pyinstaller 打包</h2><p><code>pyinstaller</code> 是一个流行的 Python 打包工具，它能够将 Python 脚本打包成各种平台的可执行文件，包括 Windows、Linux 和 macOS。使用 <code>pyinstaller</code> 可以非常简单地将 Python 代码打包成独立的可执行文件。</p><h3 id="安装-pyinstaller"><a href="#安装-pyinstaller" class="headerlink" title="安装 pyinstaller"></a>安装 <code>pyinstaller</code></h3><p>首先，您需要安装 <code>pyinstaller</code>。可以通过以下命令进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyinstaller</span><br></pre></td></tr></table></figure><h3 id="使用-pyinstaller-打包"><a href="#使用-pyinstaller-打包" class="headerlink" title="使用 pyinstaller 打包"></a>使用 <code>pyinstaller</code> 打包</h3><p>接下来，您可以使用 <code>pyinstaller</code> 来打包您的 Python 脚本。以下是一些常用的打包命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打包单个文件</span></span><br><span class="line">pyinstaller your_script.py</span><br><span class="line"><span class="comment"># 打包多个 py 文件</span></span><br><span class="line">pyinstaller [主文件] -p [其他文件<span class="number">1</span>] -p [其他文件<span class="number">2</span>]</span><br><span class="line"><span class="comment"># 打包时去除 cmd 框</span></span><br><span class="line">pyinstaller -F XXX.py --noconsole</span><br><span class="line"><span class="comment"># 打包加入 exe 图标</span></span><br><span class="line">pyinstaller -F -i picturename.ico -w XXX.py</span><br><span class="line"><span class="comment"># 打包去除控制台</span></span><br><span class="line">pyinstaller -w xxx.py</span><br><span class="line"><span class="comment"># 打包方便查看报错，可看到控制台</span></span><br><span class="line">pyinstaller -c xxx.py</span><br></pre></td></tr></table></figure><p>如果遇到错误 <code>AttributeError: module &#39;enum&#39; has no attribute &#39;IntFlag&#39;</code>，请检查是否安装了 <code>enum34</code> 包，并卸载它以解决问题。<br>执行以上命令后，<code>pyinstaller</code> 将在当前目录下生成一个 <code>dist</code> 文件夹，其中包含了打包好的可执行文件。</p><h3 id="处理-gradio-库依赖"><a href="#处理-gradio-库依赖" class="headerlink" title="处理 gradio 库依赖"></a>处理 <code>gradio</code> 库依赖</h3><p>如果您在程序中使用了 <code>gradio</code> 库，您可能需要在打包时特别注意。如果在打包后双击程序时出现闪退，您可以在命令行中运行程序以查看具体的报错原因。<br>如果遇到错误 <code>FileNotFoundError: [Errno 2] No such file or directory</code>，这通常是因为 <code>pyinstaller</code> 没有正确识别 <code>gradio</code> 相关的依赖项。您可以通过以下命令来修正这个问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyinstaller -F python_file_name --collect-data=gradio_client --collect-data=gradio</span><br></pre></td></tr></table></figure><p>如果出现 <code>FileNotFoundError: [Errno 2] No such file or directory: gradio\blocks_events.pyc</code>，则需要修改 <code>spec</code> 文件来指定对 <code>gradio</code> 库下的代码进行编译。具体操作如下：</p><ol><li>生成 <code>spec</code> 文件：<code>pyi-makespec --collect-data=gradio_client --collect-data=gradio python_file_name</code></li><li>打开与要打包的 <code>py</code> 代码同名的 <code>spec</code> 文件，在 <code>A = Analysis&#123;&#125;</code> 添加对 <code>gradio</code> 的编译：<code>module_collection_mode=&#123; &#39;gradio&#39;: &#39;py&#39;,&#125;</code></li><li>删除目录下的 <code>build</code> 文件夹，再次执行 <code>pyinstaller python_file_name.spec</code><br>然后，您可以进入 <code>dist</code> 目录，找到生成的 <code>exe</code> 文件。</li></ol><h3 id="使用-spec-文件生成单个-exe-文件"><a href="#使用-spec-文件生成单个-exe-文件" class="headerlink" title="使用 spec 文件生成单个 exe 文件"></a>使用 <code>spec</code> 文件生成单个 <code>exe</code> 文件</h3><p>您可以使用以下 <code>spec</code> 文件来生成单个 <code>exe</code> 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"># -*- mode: python ; coding: utf-8 -*-</span><br><span class="line">from PyInstaller.utils.hooks import collect_data_files</span><br><span class="line"></span><br><span class="line">datas = []</span><br><span class="line">datas += collect_data_files(&#x27;gradio_client&#x27;)</span><br><span class="line">datas += collect_data_files(&#x27;gradio&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = Analysis(</span><br><span class="line">    [&#x27;08.onnxgradio.py&#x27;],</span><br><span class="line">    pathex=[],</span><br><span class="line">    binaries=[],</span><br><span class="line">    datas=datas,</span><br><span class="line">    hiddenimports=[],</span><br><span class="line">    hookspath=[],</span><br><span class="line">    hooksconfig=&#123;&#125;,</span><br><span class="line">    runtime_hooks=[],</span><br><span class="line">    excludes=[],</span><br><span class="line">    noarchive=False,</span><br><span class="line">module_collection_mode=&#123; &#x27;gradio&#x27;: &#x27;py&#x27;,&#125;</span><br><span class="line">)</span><br><span class="line">pyz = PYZ(a.pure)</span><br><span class="line"></span><br><span class="line">exe = EXE(</span><br><span class="line">    pyz,</span><br><span class="line">    a.scripts,</span><br><span class="line">    a.binaries,</span><br><span class="line">    a.datas,</span><br><span class="line">    [],</span><br><span class="line">    name=&#x27;08.onnxgradio&#x27;,</span><br><span class="line">    debug=False,</span><br><span class="line">    bootloader_ignore_signals=False,</span><br><span class="line">    strip=False,</span><br><span class="line">    upx=True,</span><br><span class="line">    upx_exclude=[],</span><br><span class="line">    runtime_tmpdir=None,</span><br><span class="line">    console=True,</span><br><span class="line">    disable_windowed_traceback=False,</span><br><span class="line">    argv_emulation=False,</span><br><span class="line">    target_arch=None,</span><br><span class="line">    codesign_identity=None,</span><br><span class="line">    entitlements_file=None,</span><br><span class="line">)</span><br><span class="line">coll = COLLECT(</span><br><span class="line">    exe,</span><br><span class="line">    a.binaries,</span><br><span class="line">    a.datas,</span><br><span class="line">    strip=False,</span><br><span class="line">    upx=True,</span><br><span class="line">    upx_exclude=[],</span><br><span class="line">    name=&#x27;08.onnxgradio&#x27;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="二、cx-Freeze"><a href="#二、cx-Freeze" class="headerlink" title="二、cx_Freeze"></a>二、cx_Freeze</h2><p><code>cx_Freeze</code> 是另一个常用的 Python 打包工具，可以将 <code>Python</code> 脚本打包成可执行文件，并且支持跨平台。使用 <code>cx_Freeze</code> 也可以将 Python 代码打包成独立的可执行文件。</p><p>安装 <code>cx_Freeze</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install cx-Freeze</span><br></pre></td></tr></table></figure><p>使用 <code>cx_Freeze 打包</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cxfreeze your_script.py --target-dir dist</span><br></pre></td></tr></table></figure><p>执行以上命令后，<code>cx_Freeze</code> 将会在指定的目录下生成可执行文件。</p>]]></content>
      
      
      <categories>
          
          <category> 杂学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学物理方程第一章</title>
      <link href="/uncategorized/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E7%A8%8B%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
      <url>/uncategorized/%E6%95%B0%E5%AD%A6%E7%89%A9%E7%90%86%E6%96%B9%E7%A8%8B%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="书名-数学物理方程"><a href="#书名-数学物理方程" class="headerlink" title="书名-数学物理方程"></a>书名-数学物理方程</h2><h2 id="新知识概览"><a href="#新知识概览" class="headerlink" title="新知识概览"></a>新知识概览</h2><h1 id="一些典型方程和定解条件的推导"><a href="#一些典型方程和定解条件的推导" class="headerlink" title="一些典型方程和定解条件的推导"></a>一些典型方程和定解条件的推导</h1><h3 id="基本方程的建立"><a href="#基本方程的建立" class="headerlink" title="基本方程的建立"></a>基本方程的建立</h3><p>简要介绍本课的新知识，包括概念、定义和基本原理。</p><h3 id="初值条件与边界条件"><a href="#初值条件与边界条件" class="headerlink" title="初值条件与边界条件"></a>初值条件与边界条件</h3><p>问题所具有的特定条件也用数学形式表达出来，这是因为任何一个具体的物理现象都是处在特定条件之下的.</p><h3 id="定解问题的提法"><a href="#定解问题的提法" class="headerlink" title="定解问题的提法"></a>定解问题的提法</h3><p>由于每一个物理过程都处在特定的条件之下，所以我们的任务是要求出偏微分方程的适合某些特定条件的解.初值条件和边界条件都称为定解条件.把某个偏微分方程和相应的定解条件结合在一起，就构成了一个定解问题。</p><h2 id="学习笔记"><a href="#学习笔记" class="headerlink" title="学习笔记"></a>学习笔记</h2><h3 id="基本方程的建立-1"><a href="#基本方程的建立-1" class="headerlink" title="基本方程的建立"></a>基本方程的建立</h3><h4 id="例-1-弦的振动"><a href="#例-1-弦的振动" class="headerlink" title="例 1 弦的振动"></a>例 1 弦的振动</h4><p>设有一根均匀柔软的 细弦，平 衡时沿 直线拉紧，而且除 受不 随时间 而 变的张力作用及弦本身的重力外，不受外力影响.下面研究弦作微小横向振动的规律.所谓“横向”是指全部运动出现在一个平面上，而 且弦上的点沿垂直于 x 轴的方向运动(图 1-1).所谓“微小”是指振动的幅度及弦在任意位置处切线的倾角都很小，以至它们的高于一次方的项都可略而不计.</p><p><img src="https://cdn.jsdelivr.net/gh/littlepenguin66/webImage/sxwlfc1.1.png" alt="图1-1"><br>用牛顿运动定律，作用于弧段上任一方向上的力的总和等于这段弧的 质量 乘该方向 上的加速度.在 x 轴方向，弧段 MM’受力的总和为<code>-Tcos α+T&#39;cos α&#39;</code>,由于弦只作横向振动，所以</p><script type="math/tex; mode=display">T'\cos\alpha'-T\cos\alpha=0.\quad(1.1)</script><p>按照上述弦振动微小的假设，可知在振动过程中弦上 M 点与 M’点处切线的倾角都很小，<code>α≈0,α&#39;=0</code>,从而由</p><script type="math/tex; mode=display">\cos\alpha=1-\frac{\alpha^{2}}{2!}+\frac{\alpha^{4}}{4!}-\cdots</script><p>可知，当我们略去$\alpha$与$\alpha^\prime$的所有高于一次方的各项时，就有$\cos \alpha \approx 1$, $\cos \alpha ^{\prime }\approx 1$,<br>代人<code>(1.1)</code>式，便可近似得到</p><script type="math/tex; mode=display">T=T^\prime.</script><p>在$u$ 方向，弧段$\widehat MM^\prime$受力的总和为-$T\sin\alpha+T^{\prime}\sin\alpha^{\prime}-\rho g$ds,其中-$\rho g$ds 是弧段$\widehat{MM}^{\prime}$的重力.又因当$\alpha\approx0,\alpha^\prime\approx0$时</p><script type="math/tex; mode=display">\sin\alpha=\frac{\tan\alpha}{\sqrt{1+\tan^{2}\alpha}}\approx\tan\alpha=\frac{\partial u(x,t)}{\partial x},</script><script type="math/tex; mode=display">\sin\alpha^{\prime}\approx\tan\alpha^{\prime}=\frac{\partial u\left(x+\mathrm{d}x,t\right)}{\partial x},</script><script type="math/tex; mode=display">\mathrm{d}s=\sqrt{1+\left[\frac{\partial u\left(x,t\right)}{\partial x}\right]^{2}}\mathrm{d}x\approx\mathrm{d}x,</script><p>且小弧段在时刻$\iota$沿$u$方向运动的加速度近似为$\frac{\partial^2u(x,t)}{\partial t^2}$,小弧段的质量为$\rho$ds ,所以</p><script type="math/tex; mode=display">-T\sin\alpha+T'\sin\alpha'-\rho g\mathrm{d}s\approx\rho\mathrm{d}s\frac{\partial^{2}u(x,t)}{\partial t^{^2}}</script><p>或</p><script type="math/tex; mode=display">T\Big[\frac{\partial u\left(x+\mathrm{d}x,t\right)}{\partial x}-\frac{\partial u\left(x,t\right)}{\partial x}\Big]-\rho g\mathrm{d}x\approx\rho\frac{\partial^{2}u\left(x,t\right)}{\partial t^{2}}\mathrm{d}x,(1.2)</script><p>上式左边方括号内的部分是由于$x$产生 d$x$ 的变化而引起的$\frac\partial u(x,t){\partial x}$的改变量，可用微分近似代替，即</p><script type="math/tex; mode=display">\frac{\partial u\left(x+\mathrm{d}x,t\right)}{\partial x}-\frac{\partial u\left(x,t\right)}{\partial u}\approx\frac{\partial}{\partial x}\biggl[\frac{\partial u\left(x,t\right)}{\partial x}\biggr]\mathrm{d}x</script><script type="math/tex; mode=display">=\frac{\partial^{2}u\left(x,t\right)}{\partial x^{2}}\mathrm{d}x,</script><p>于是</p><script type="math/tex; mode=display">\left[T\frac{\partial^{2}u\left(x,t\right)}{\partial x^{2}}-\rho g\right]\mathrm{d}x\approx\rho\frac{\partial^{2}u\left(x,t\right)}{\partial t^{2}}\mathrm{d}x</script><p>或</p><script type="math/tex; mode=display">\frac{T}{\rho}\frac{\partial^{2}u\left(x,t\right)}{\partial x^{2}}\approx\frac{\partial^{2}u\left(x,t\right)}{\partial t^{2}}+g.</script><p>一般说来，张力较大时弦振动速度变化很快，即$\frac{\partial^2u}{\partial t^2}$要比 $g$ 大得多，所以又可以<br>把$g$略去.经过这样逐步略去一些次要的量，抓住主要的量，在$u(x,t)$关于${x,t}$都是二次连续可微的前提下，最后得出$u(x,t)$应近似地满足方程</p><script type="math/tex; mode=display">\frac{\partial^{2}u}{\partial t^{2}}=a^{2}\frac{\partial^{2}u}{\partial x^{2}},(1.3)</script><p>这里的$a^{2}=\frac{T}{\rho}.(1.3)$式称为一维波动方程.<br>如果在振动过程中，弦上另外还受到一个与弦的振动方向平行的外力，且假定在时刻$\iota$弦上$x$点处的外力密度为$F(x,t)$,显然，这时(1.1)及(1.2)分别为</p><script type="math/tex; mode=display">T^{\prime}\cos\alpha^{\prime}-T\cos\alpha=0,</script><script type="math/tex; mode=display">F\mathrm{d}s-T\mathrm{sin}\alpha+T'\mathrm{sin}\alpha'-\rho g\mathrm{d}s\approx\rho\mathrm{d}s\frac{\partial^{2}u}{\partial t^{2}}.</script><p>利用上面的推导方法并略去弦本身的质量，可得弦的强迫振动方程为</p><script type="math/tex; mode=display">\frac{\partial^{2}u}{\partial t^{2}}=a^{2}\frac{\partial^{2}u}{\partial x^{2}}+f(x,\iota),(1.3)^{\prime}</script><p>其中$f(x,t)=\frac1aF(x,t)$ ,表示 $t$ 时刻单位质量的弦在 $x$ 点处所受的外力密度.<br>方程( 1.3)与$(1.3)^{\prime}$的差别在于$(1.3)^{\prime}$的右端多了一个与未知函数$u$无关的项 $f(x,t)$,这个项称为自由项.包括非零自由项的方程称为非齐次方程，自由项恒等于零的方程称为齐次方程.(1.3)为齐次一维波动方程，$(1.3)^{\prime}$为非齐次一维波动方程.</p><h3 id="初值条件与边界条件-1"><a href="#初值条件与边界条件-1" class="headerlink" title="初值条件与边界条件"></a>初值条件与边界条件</h3><p>在将物理问题转化为数学表达式时，除了需要表达物理规律本身，还需要将问题的特定条件用数学形式表达出来。这些特定条件包括初始状态和边界约束，分别称为初值条件和边界条件。例如在弦振动问题中，虽然我们已经得到了描述弦振动的普遍方程，但如果没有考虑弦的初始状态和两端点所受的约束，我们就无法准确地描述一个特定情况下的弦振动。因此，为了精确描述和研究具体的物理现象，我们需要将这些特定条件纳入数学模型中。<br>下面具体说明初值条件和边界条件的表达形式.先谈初值条件，对于弦振动问题来说，初值条件就是弦在开始时刻的位移及速度，若以$\varphi(x),\psi(x)$分别表示初位移和初速度，则初值条件可以表达为</p><script type="math/tex; mode=display">\begin{cases}u\bigg|_{t=0}=\varphi(x),\\\\\frac{\partial u}{\partial t}\bigg|_{t=0}=\psi(x).\end{cases},(1.22)</script><h3 id="定解问题的提法-1"><a href="#定解问题的提法-1" class="headerlink" title="定解问题的提法"></a>定解问题的提法</h3><p>在工程技术中，经常会遇到需要解决偏微分方程的问题。一个函数如果满足某个偏微分方程，并且具有所需的连续偏导数，使得代入方程后成为恒等式，那么这个函数就是该方程的解。<br>由于物理过程总是在特定条件下发生，我们需要找到满足特定条件的偏微分方程的解，这些特定条件包括<strong>初值条件</strong>和<strong>边界条件</strong>，统称为<strong>定解条件</strong>。<br>定解问题可以分为三类：</p><ul><li><strong>初值问题（或称柯西问题）</strong>：只有初值条件。</li><li><strong>边值问题</strong>：只有边界条件。</li><li><strong>混合问题</strong>：既有初值条件又有边界条件。<br>定解问题的合理性可以从三个方面检验：</li><li><strong>存在性:</strong> 即看所归结出来的定解问题是否有解；</li><li><strong>唯一性:</strong> 即看是否只有一个解；</li><li><strong>稳定性:</strong> 即看当定解条件有微小变动时，解是否相应地只有微小的变动，如果确实如此，此解便称为稳定的<br>如果定解问题存在唯一且稳定的解，则称为<strong>适定的</strong>。然而，讨论定解问题的适定性通常非常困难，因此本书将重点放在讨论定解问题的解法上，而不过多涉及适定性的讨论，因为书中所讨论的定解问题都是经典的，它们的适定性已经得到了证明。</li></ul><h2 id="练习题与答案"><a href="#练习题与答案" class="headerlink" title="练习题与答案"></a>练习题与答案</h2><h3 id="无"><a href="#无" class="headerlink" title="无"></a>无</h3><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li>工程数学 数学物理方程与特征函数</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 数学物理方程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>九种常见激活函数</title>
      <link href="/%E6%9D%82%E5%AD%A6/%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0/"/>
      <url>/%E6%9D%82%E5%AD%A6/%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>神经网络中的激活函数是神经网络中至关重要的一环，它们决定了神经网络的非线性特性，能够让神经网络学习非常复杂的函数。激活函数的种类也非常丰富，从最早的 sigmoid、tanh，到后来的 ReLU、LeakyReLU、ELU 等，再到最近的 GELU、SE-ReLU、SiLU 等，每种激活函数都有其独特的优点和适用场景。</p><p>在本篇文章中，我们将对神经网络中常见的激活函数进行总结和介绍，同时也会介绍一些新兴的激活函数，帮助读者了解它们的特点和使用方法，以便在实际应用中能够选择合适的激活函数来提升神经网络的性能。</p><h3 id="常见的激活函数"><a href="#常见的激活函数" class="headerlink" title="常见的激活函数"></a>常见的激活函数</h3><p>以下是一些常见的激活函数：</p><ul><li><strong>Sigmoid</strong></li><li><strong>Tanh</strong></li><li><strong>ReLU</strong></li><li><strong>LeakyReLU</strong></li><li><strong>ELU</strong></li></ul><h3 id="新兴的激活函数"><a href="#新兴的激活函数" class="headerlink" title="新兴的激活函数"></a>新兴的激活函数</h3><p>以下是一些新兴的激活函数：</p><ul><li><strong>GELU</strong></li><li><strong>SE-ReLU</strong></li><li><strong>SiLU</strong></li></ul><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>神经网络中的激活函数是非常重要的组成部分，它的作用是将神经元的输入信号转换为输出信号，从而实现神经网络的非线性映射。激活函数的意义在于它能够引入非线性特性，使得神经网络可以拟合非常复杂的函数，从而提高了神经网络的表达能力和预测性能。</p><p>具体来说，激活函数的作用有以下几个方面：</p><ol><li><strong>引入非线性特性</strong>：激活函数能够将神经元的输入信号转换为输出信号，从而引入非线性特性，使得神经网络可以拟合非常复杂的函数。</li><li><strong>压缩输出范围</strong>：激活函数能够将神经元的输出范围压缩到一定的范围内，这有助于防止神经元输出的值过大或过小，从而提高了神经网络的稳定性和泛化性能。</li><li><strong>增加网络深度</strong>：激活函数能够增加神经网络的深度，从而提高了神经网络的表达能力和预测性能。</li><li><strong>改善梯度消失问题</strong>：激活函数能够改善神经网络中的梯度消失问题，从而提高了神经网络的训练效率和收敛速度。</li></ol><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><h3 id="sigmoid-函数"><a href="#sigmoid-函数" class="headerlink" title="sigmoid 函数"></a>sigmoid 函数</h3><p>sigmoid 函数是神经网络中最早也是最常用的激活函数之一，它的特点是将输入值映射到 0 到 1 之间的连续范围内，输出值具有良好的可解释性，但是它在梯度消失和输出饱和等问题上表现不佳。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sigmoid</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.</span> / (<span class="number">1.</span> + np.exp(-x))</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/littlepenguin66/webImage/sigmoid.jpg" alt="Sigmoid"></p><h3 id="ReLU-函数"><a href="#ReLU-函数" class="headerlink" title="ReLU 函数"></a>ReLU 函数</h3><p>ReLU 函数是当前最常用的激活函数之一，它的特点是简单、快速，并且在许多情况下表现出色。ReLU 函数将负数输入映射到 0，将正数输入保留不变，因此在训练过程中可以避免梯度消失的问题。但是 ReLU 函数在输入为负数时输出为 0，这可能导致神经元死亡，因此后续的改进版本 LeakyReLU 得到了广泛的应用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ReLU</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> np.maximum(<span class="number">0</span>, x)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/littlepenguin66/webImage/ReLU.jpg" alt="ReLU"></p><h3 id="LeakyReLU-函数"><a href="#LeakyReLU-函数" class="headerlink" title="LeakyReLU 函数"></a>LeakyReLU 函数</h3><p>LeakyReLU 函数是 ReLU 函数的改进版本，它在输入为负数时输出一个小的负数，从而避免了 ReLU 函数可能导致神经元死亡的问题。LeakyReLU 函数的优点是简单、快速，并且在许多情况下表现出色，但是其超参数需要手动调整，因此在实际应用中需要进行一定的调试。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">LeakyReLU</span>(<span class="params">x, alpha=<span class="number">0.1</span></span>):</span><br><span class="line">    <span class="keyword">return</span> np.maximum(alpha*x, x)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/littlepenguin66/webImage/LeakyReLU.jpg" alt="LeakyReLU"></p><h3 id="Tanh-函数"><a href="#Tanh-函数" class="headerlink" title="Tanh 函数"></a>Tanh 函数</h3><p>Tanh 函数是一种具有 S 形状的激活函数，其特点是将输入值映射到-1 到 1 之间的连续范围内，输出值也具有良好的可解释性。Tanh 函数在某些情况下可以表现出色，但是它也存在梯度消失和输出饱和等问题，因此在深度神经网络中使用并不广泛。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Tanh</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> np.tanh(x)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/littlepenguin66/webImage/tanh.jpg" alt="Tanh"></p><h3 id="Softmax-函数"><a href="#Softmax-函数" class="headerlink" title="Softmax 函数"></a>Softmax 函数</h3><p>Softmax 函数是一种常用于多分类问题的激活函数，它将输入值映射到 0 到 1 之间的概率分布，可以将神经网络的输出转换为各个类别的概率值。Softmax 函数的优点是简单、易于理解，并且在多分类问题中表现出色，但是它也存在梯度消失和输出饱和等问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Softmax</span>(<span class="params">x</span>):</span><br><span class="line">    exp_x = np.exp(x)</span><br><span class="line">    <span class="keyword">return</span> exp_x / np.<span class="built_in">sum</span>(exp_x, axis=<span class="number">0</span>, keepdims=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/littlepenguin66/webImage/softmax.jpg" alt="SoftMax"></p><h3 id="GELU-函数"><a href="#GELU-函数" class="headerlink" title="GELU 函数"></a>GELU 函数</h3><p>GELU 函数是一种近年来提出的激活函数，它的特点是在 ReLU 函数的基础</p><p>上引入了高斯误差线性单元，从而在某些情况下能够表现出色。GELU 函数具有平滑的非线性特性，可以避免 ReLU 函数可能导致的神经元死亡问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">GELU</span>(<span class="params">x</span>):</span><br><span class="line">    cdf = <span class="number">0.5</span> * (<span class="number">1.0</span> + np.tanh((np.sqrt(<span class="number">2</span> / np.pi) * (x + <span class="number">0.044715</span> * np.power(x, <span class="number">3</span>)))))</span><br><span class="line">    <span class="keyword">return</span> x * cdf</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/littlepenguin66/webImage/GeLU.jpg" alt="GeLU"></p><h3 id="SE-ReLU-函数"><a href="#SE-ReLU-函数" class="headerlink" title="SE_ReLU 函数"></a>SE_ReLU 函数</h3><p>SE_ReLU 函数是一种近年来提出的激活函数，它的特点是在 ReLU 函数的基础上引入了 Sigmoid 函数和 Exponential 函数，从而能够增加神经元的表达能力。SE_ReLU 函数具有非常好的平滑性和可解释性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">SE_ReLU</span>(<span class="params">x, alpha=<span class="number">0.1</span>, beta=<span class="number">10</span></span>):</span><br><span class="line">    <span class="keyword">return</span> np.where(x &gt; <span class="number">0</span>, x + alpha * x * np.exp(-beta * x), x)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/littlepenguin66/webImage/SE_ReLU.jpg" alt="SE_ReLU"></p><h3 id="SiLU-函数"><a href="#SiLU-函数" class="headerlink" title="SiLU 函数"></a>SiLU 函数</h3><p>SiLU 函数是一种近年来提出的激活函数，它的特点是在 sigmoid 函数的基础上引入了自身的输入，从而能够表现出更好的非线性特性。SiLU 函数具有非常好的平滑性和可解释性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">SE_ReLU</span>(<span class="params">x, alpha=<span class="number">0.1</span>, beta=<span class="number">10</span></span>):</span><br><span class="line">    <span class="keyword">return</span> np.where(x &gt; <span class="number">0</span>, x + alpha * x * np.exp(-beta * x), x)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/littlepenguin66/webImage/SiLU.jpg" alt="SiLU"></p><h3 id="DynamicShiftMax-DynamicReLU-A-DynamicReLU-B-函数"><a href="#DynamicShiftMax-DynamicReLU-A-DynamicReLU-B-函数" class="headerlink" title="DynamicShiftMax &amp; DynamicReLU_A &amp; DynamicReLU_B 函数"></a>DynamicShiftMax &amp; DynamicReLU_A &amp; DynamicReLU_B 函数</h3><p>DynamicShiftMax 函数是一种近年来提出的激活函数，它的特点是在 ReLU 函数的基础上引入了动态偏移量，从而能够增加神经元的表达能力。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">DynamicShiftMax</span>(<span class="params">x, alpha=<span class="number">0.1</span></span>):</span><br><span class="line">    <span class="keyword">return</span> np.maximum(x, x + alpha * np.<span class="built_in">max</span>(x, axis=<span class="number">0</span>, keepdims=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DynamicReLU_A</span>(<span class="params">x, alpha=<span class="number">0.1</span></span>):</span><br><span class="line">    <span class="keyword">return</span> np.maximum(x, x + alpha * np.mean(x, axis=<span class="number">0</span>, keepdims=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DynamicReLU_B</span>(<span class="params">x, alpha=<span class="number">0.1</span></span>):</span><br><span class="line">    <span class="keyword">return</span> np.maximum(x, x + alpha * np.std(x, axis=<span class="number">0</span>, keepdims=<span class="literal">True</span>))</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/littlepenguin66/webImage/DSM%26DRLA%26DRLB.jpg" alt="DSM%26DRLA%26DRLB"></p><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><p>我们采用控制变量法进行激活函数的推理速度测试，x 为输入，范围为-1 到 1 之间的十万个数据，运行次数为 100 计算激活函数的计算耗时。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    x = np.linspace(-<span class="number">1</span>, <span class="number">1</span>, <span class="number">100000</span>)</span><br><span class="line">    t1 = time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        y = sigmoid(x)</span><br><span class="line">    t2 = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">float</span>(t2 - t1))</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/littlepenguin66/webImage/FET.jpg" alt="FunctionExecutionTime"></p><p>完整代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sigmoid</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.</span> / (<span class="number">1.</span> + np.exp(-x))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ReLU</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> np.maximum(<span class="number">0</span>, x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LeakyReLU</span>(<span class="params">x, alpha=<span class="number">0.1</span></span>):</span><br><span class="line">    <span class="keyword">return</span> np.maximum(alpha * x, x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Tanh</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> np.tanh(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Softmax</span>(<span class="params">x</span>):</span><br><span class="line">    exp_x = np.exp(x)</span><br><span class="line">    <span class="keyword">return</span> exp_x / np.<span class="built_in">sum</span>(exp_x, axis=<span class="number">0</span>, keepdims=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GELU</span>(<span class="params">x</span>):</span><br><span class="line">    cdf = <span class="number">0.5</span> * (<span class="number">1.0</span> + np.tanh((np.sqrt(<span class="number">2</span> / np.pi) * (x + <span class="number">0.044715</span> * np.power(x, <span class="number">3</span>)))))</span><br><span class="line">    <span class="keyword">return</span> x * cdf</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SE_ReLU</span>(<span class="params">x, alpha=<span class="number">0.1</span>, beta=<span class="number">10</span></span>):</span><br><span class="line">    <span class="keyword">return</span> np.where(x &gt; <span class="number">0</span>, x + alpha * x * np.exp(-beta * x), x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SE_ReLU</span>(<span class="params">x, alpha=<span class="number">0.1</span>, beta=<span class="number">10</span></span>):</span><br><span class="line">    <span class="keyword">return</span> np.where(x &gt; <span class="number">0</span>, x + alpha * x * np.exp(-beta * x), x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DynamicShiftMax</span>(<span class="params">x, alpha=<span class="number">0.1</span></span>):</span><br><span class="line">    <span class="keyword">return</span> np.maximum(x, x + alpha * np.<span class="built_in">max</span>(x, axis=<span class="number">0</span>, keepdims=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DynamicReLU_A</span>(<span class="params">x, alpha=<span class="number">0.1</span></span>):</span><br><span class="line">    <span class="keyword">return</span> np.maximum(x, x + alpha * np.mean(x, axis=<span class="number">0</span>, keepdims=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DynamicReLU_B</span>(<span class="params">x, alpha=<span class="number">0.1</span></span>):</span><br><span class="line">    <span class="keyword">return</span> np.maximum(x, x + alpha * np.std(x, axis=<span class="number">0</span>, keepdims=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">name = [sigmoid, ReLU, LeakyReLU, Tanh, Softmax, GELU, SE_ReLU, DynamicShiftMax, DynamicReLU_A, DynamicReLU_B]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    x = np.linspace(-<span class="number">1</span>, <span class="number">1</span>, <span class="number">1000000</span>)</span><br><span class="line">    times = []  <span class="comment"># 创建一个空列表来存储函数名称和时间</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> name:</span><br><span class="line">        t1 = time.perf_counter()  <span class="comment"># 使用perf_counter</span></span><br><span class="line">        y = n(x)</span><br><span class="line">        t2 = time.perf_counter()  <span class="comment"># 使用perf_counter</span></span><br><span class="line">        times.append((n.__name__, <span class="built_in">float</span>(t2 - t1)))  <span class="comment"># 将函数名称和时间作为元组添加到列表中</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> n, t <span class="keyword">in</span> times:  <span class="comment"># 遍历列表并打印每个函数名称和时间</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;n&#125;</span>: <span class="subst">&#123;t&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用plot绘制times列表中的数据</span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">5</span>))</span><br><span class="line">plt.bar(*<span class="built_in">zip</span>(*times)) <span class="comment"># 使用zip(*times)将元组列表转换为两个元组列表</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;Time (s)&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Activation Functions&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 杂学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>页面配置</title>
      <link href="/Markdown/%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/"/>
      <url>/Markdown/%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="🧱-Front-matter-的基本认识"><a href="#🧱-Front-matter-的基本认识" class="headerlink" title="🧱 Front-matter 的基本认识"></a>🧱 Front-matter 的基本认识</h3><p>Front-matter 是 markdown 文件最上方以 — 分隔的区域，用于指定个别档案的变数。其中又分为两种 markdown 里</p><ul><li><strong>Page Front-matter</strong> 用于页面配置</li><li><strong>Post Front-matter</strong> 用于文章页配置</li></ul><h4 id="Page-Front-matter"><a href="#Page-Front-matter" class="headerlink" title="Page Front-matter"></a>Page Front-matter</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">【必需】页面标题</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">【必需】页面创建日期</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">【必需】标签、分类、关于、音乐馆、友情链接、相册、相册详情、朋友圈、即刻页面需要配置</span></span><br><span class="line"><span class="attr">updated:</span> <span class="string">【可选】页面更新日期</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">【可选】页面描述</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">【可选】页面关键字</span></span><br><span class="line"><span class="attr">comments:</span> <span class="string">【可选】显示页面评论模块(默认</span> <span class="literal">true</span><span class="string">)</span></span><br><span class="line"><span class="attr">top_img:</span> <span class="string">【可选】页面顶部图片</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="string">【可选】显示</span> <span class="string">mathjax(当设置</span> <span class="string">mathjax</span> <span class="string">的</span> <span class="attr">per_page:</span> <span class="literal">false</span> <span class="string">时，才需要配置，默认</span> <span class="literal">false</span><span class="string">)</span></span><br><span class="line"><span class="attr">katex:</span> <span class="string">【可选】显示</span> <span class="string">katex(当设置</span> <span class="string">katex</span> <span class="string">的</span> <span class="attr">per_page:</span> <span class="literal">false</span> <span class="string">时，才需要配置，默认</span> <span class="literal">false</span><span class="string">)</span></span><br><span class="line"><span class="attr">aside:</span> <span class="string">【可选】显示侧边栏</span> <span class="string">(默认</span> <span class="literal">true</span><span class="string">)</span></span><br><span class="line"><span class="attr">aplayer:</span> <span class="string">【可选】在需要的页面加载</span> <span class="string">aplayer</span> <span class="string">的</span> <span class="string">js</span> <span class="string">和</span> <span class="string">css,请参考文章下面的音乐</span> <span class="string">配置</span></span><br><span class="line"><span class="attr">highlight_shrink:</span> <span class="string">【可选】配置代码框是否展开(true/false)(默认为设置中</span> <span class="string">highlight_shrink</span> <span class="string">的配置)</span></span><br><span class="line"><span class="attr">top_single_background:</span> <span class="string">【可选】部分页面的顶部模块背景图片</span></span><br></pre></td></tr></table></figure><h4 id="Post-Front-matter"><a href="#Post-Front-matter" class="headerlink" title="Post Front-matter"></a>Post Front-matter</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">【必需】文章标题</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">【必需】文章创建日期</span></span><br><span class="line"><span class="attr">updated:</span> <span class="string">【可选】文章更新日期</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">【可选】文章标签</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">【可选】文章分类</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">【可选】文章关键字</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">【可选】文章描述</span></span><br><span class="line"><span class="attr">top_img:</span> <span class="string">【可选】文章顶部图片</span></span><br><span class="line"><span class="attr">cover:</span> <span class="string">【可选】文章缩略图(如果没有设置</span> <span class="string">top_img,文章页顶部将显示缩略图，可设为</span> <span class="literal">false</span><span class="string">/图片地址/留空)</span></span><br><span class="line"><span class="attr">comments:</span> <span class="string">【可选】显示文章评论模块(默认</span> <span class="literal">true</span><span class="string">)</span></span><br><span class="line"><span class="attr">toc:</span> <span class="string">【可选】显示文章</span> <span class="string">TOC(默认为设置中</span> <span class="string">toc</span> <span class="string">的</span> <span class="string">enable</span> <span class="string">配置)</span></span><br><span class="line"><span class="attr">toc_number:</span> <span class="string">【可选】显示</span> <span class="string">toc_number(默认为设置中</span> <span class="string">toc</span> <span class="string">的</span> <span class="string">number</span> <span class="string">配置)</span></span><br><span class="line"><span class="attr">toc_style_simple:</span> <span class="string">【可选】显示</span> <span class="string">toc</span> <span class="string">简洁模式</span></span><br><span class="line"><span class="attr">copyright:</span> <span class="string">【可选】显示文章版权模块(默认为设置中</span> <span class="string">post_copyright</span> <span class="string">的</span> <span class="string">enable</span> <span class="string">配置)</span></span><br><span class="line"><span class="attr">copyright_author:</span> <span class="string">【可选】文章版权模块的文章作者</span></span><br><span class="line"><span class="attr">copyright_author_href:</span> <span class="string">【可选】文章版权模块的文章作者链接</span></span><br><span class="line"><span class="attr">copyright_url:</span> <span class="string">【可选】文章版权模块的文章链接链接</span></span><br><span class="line"><span class="attr">copyright_info:</span> <span class="string">【可选】文章版权模块的版权声明文字</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="string">【可选】显示</span> <span class="string">mathjax(当设置</span> <span class="string">mathjax</span> <span class="string">的</span> <span class="attr">per_page:</span> <span class="literal">false</span> <span class="string">时，才需要配置，默认</span> <span class="literal">false</span><span class="string">)</span></span><br><span class="line"><span class="attr">katex:</span> <span class="string">【可选】显示</span> <span class="string">katex(当设置</span> <span class="string">katex</span> <span class="string">的</span> <span class="attr">per_page:</span> <span class="literal">false</span> <span class="string">时，才需要配置，默认</span> <span class="literal">false</span><span class="string">)</span></span><br><span class="line"><span class="attr">aplayer:</span> <span class="string">【可选】在需要的页面加载</span> <span class="string">aplayer</span> <span class="string">的</span> <span class="string">js</span> <span class="string">和</span> <span class="string">css,请参考文章下面的音乐</span> <span class="string">配置</span></span><br><span class="line"><span class="attr">highlight_shrink:</span> <span class="string">【可选】配置代码框是否展开(true/false)(默认为设置中</span> <span class="string">highlight_shrink</span> <span class="string">的配置)</span></span><br><span class="line"><span class="attr">aside:</span> <span class="string">【可选】显示侧边栏</span> <span class="string">(默认</span> <span class="literal">true</span><span class="string">)</span></span><br><span class="line"><span class="attr">swiper_index:</span> <span class="string">【可选】首页轮播图配置</span> <span class="string">index</span> <span class="string">索引，数字越小越靠前</span></span><br><span class="line"><span class="attr">top_group_index:</span> <span class="string">【可选】首页右侧卡片组配置,</span> <span class="string">数字越小越靠前</span></span><br><span class="line"><span class="attr">ai:</span> <span class="string">【可选】文章ai摘要</span></span><br><span class="line"><span class="attr">main_color:</span> <span class="string">【可选】文章主色，必须是16进制颜色且有6位，不可缩减，例如#ffffff</span> <span class="string">不可写成#fff</span></span><br></pre></td></tr></table></figure><p><strong>使用方法</strong>：</p><ol><li>在 Markdown 文件的最上方添加 Front-matter 区域，以<code>---</code>分隔。</li><li>根据需要配置 Page Front-matter 或 Post Front-matter 中的参数。</li><li>可选参数可以根据个人需求添加，不必全部包含。</li><li>特定页面的 Front-matter 配置（如 swiper_index 和 top_group_index）可以实现轮播图和推荐卡片的显示。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>anzhiyu添加新页面基于已有模板</title>
      <link href="/Markdown/anzhiyu%E6%B7%BB%E5%8A%A0%E6%96%B0%E9%A1%B5%E9%9D%A2%E5%9F%BA%E4%BA%8E%E5%B7%B2%E6%9C%89%E6%A8%A1%E6%9D%BF/"/>
      <url>/Markdown/anzhiyu%E6%B7%BB%E5%8A%A0%E6%96%B0%E9%A1%B5%E9%9D%A2%E5%9F%BA%E4%BA%8E%E5%B7%B2%E6%9C%89%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>anzhiyu</code>主题仅支持添加现有模板，例如<code>album</code>、<code>essay</code>等。如果您使用以下命令创建新页面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page pageName</span><br></pre></td></tr></table></figure><p>由于<code>./themes/anzhiyu/layout/page.pug</code>中的以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">block content</span><br><span class="line">  #page</span><br><span class="line">    if top_img === false &amp;&amp; !page.top_single</span><br><span class="line">      h1.page-title= page.title</span><br><span class="line">    case page.type</span><br><span class="line">      when &#x27;tags&#x27;</span><br><span class="line">        include includes/page/tags.pug</span><br><span class="line">      when &#x27;link&#x27;</span><br><span class="line">        include includes/page/flink.pug</span><br><span class="line">      when &#x27;categories&#x27;</span><br><span class="line">        include includes/page/categories.pug</span><br><span class="line">      when &#x27;essay&#x27;</span><br><span class="line">        include includes/page/essay.pug</span><br><span class="line">      when &#x27;room&#x27;</span><br><span class="line">        include includes/page/room.pug</span><br><span class="line">      when &#x27;about&#x27;</span><br><span class="line">        include includes/page/about.pug</span><br><span class="line">      when &#x27;album&#x27;</span><br><span class="line">        include includes/page/album.pug</span><br><span class="line">      when &#x27;fcircle&#x27;</span><br><span class="line">        include includes/page/fcircle.pug</span><br><span class="line">      when &#x27;album_detail&#x27;</span><br><span class="line">        include includes/page/album_detail.pug</span><br><span class="line">      when &#x27;music&#x27;</span><br><span class="line">        include includes/page/music.pug</span><br><span class="line">      when &#x27;equipment&#x27;</span><br><span class="line">        include includes/page/equipment.pug</span><br><span class="line">      default</span><br><span class="line">        include includes/page/default-page.pug</span><br></pre></td></tr></table></figure><p>新页面将使用<code>default-page</code>的 JavaScript 和 CSS，这可能会导致外观不尽如人意（除非您有能力自行编写）。因此，我建议您基于现有模板进行修改。在这里，我们将使用模板库中的<code>equipment</code>页面作为示例进行自定义修改。</p><h4 id="具体方法如下："><a href="#具体方法如下：" class="headerlink" title="具体方法如下："></a>具体方法如下：</h4><ol><li><p>找到以下文件：</p><ul><li><code>themes\anzhiyu\layout\page.pug</code></li><li><code>themes\anzhiyu\layout\includes\page\equipment.pug</code></li><li><code>themes\anzhiyu\source\css\_page\equipment.styl</code></li></ul></li><li><p>在<code>page.pug</code>中添加以下代码：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#page</span><br><span class="line">  if top_img === false &amp;&amp; !page.top_single</span><br><span class="line">    h1.page-title= page.title</span><br><span class="line">  case page.type</span><br><span class="line">    when &#x27;tags&#x27;</span><br><span class="line">      include includes/page/tags.pug</span><br><span class="line">    when &#x27;link&#x27;</span><br><span class="line">      include includes/page/flink.pug</span><br><span class="line">    when &#x27;categories&#x27;</span><br><span class="line">      include includes/page/categories.pug</span><br><span class="line">    when &#x27;essay&#x27;</span><br><span class="line">      include includes/page/essay.pug</span><br><span class="line">    when &#x27;room&#x27;</span><br><span class="line">      include includes/page/room.pug</span><br><span class="line">    when &#x27;about&#x27;</span><br><span class="line">      include includes/page/about.pug</span><br><span class="line">    when &#x27;album&#x27;</span><br><span class="line">      include includes/page/album.pug</span><br><span class="line">    when &#x27;fcircle&#x27;</span><br><span class="line">      include includes/page/fcircle.pug</span><br><span class="line">    when &#x27;album_detail&#x27;</span><br><span class="line">      include includes/page/album_detail.pug</span><br><span class="line">    when &#x27;music&#x27;</span><br><span class="line">      include includes/page/music.pug</span><br><span class="line">    when &#x27;equipment&#x27;</span><br><span class="line">      include includes/page/equipment.pug</span><br><span class="line">    when &#x27;pageName&#x27;  // 新加的代码</span><br><span class="line">      include includes/page/pageName.pug  // 新加的代码</span><br><span class="line">    default</span><br><span class="line">      include includes/page/default-page.pug</span><br></pre></td></tr></table></figure><ol start="3"><li><p>接着，对<code>equipment.pug</code>进行操作：</p><ul><li>新建一个文件<code>pageName.pug</code>。</li><li>复制<code>equipment.pug</code>中的所有代码。</li><li>将所有的<code>equipment</code>关键字替换为<code>pageName</code></li></ul></li><li><p>对<code>equipment.styl</code>重复上述步骤。</p></li></ol><p>完成以上步骤后，您就可以开始编辑新的<code>pageName.yml</code>文件了。</p><ol start="5"><li>直接把<code>equipment.yml</code>复制一份到新文件<code>pageName.yml</code>，并且把所有的<code>equipment</code>字样全部替换为<code>pageName</code>，就可以根据<code>equipment</code>的编辑模式对<code>pageName</code>页面进行编辑了。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
