<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>九种常见激活函数</title>
      <link href="/%E8%8A%9D%E5%A3%AB%E5%AD%A6%E4%B9%A0/%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0/"/>
      <url>/%E8%8A%9D%E5%A3%AB%E5%AD%A6%E4%B9%A0/%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>神经网络中的激活函数是神经网络中至关重要的一环，它们决定了神经网络的非线性特性，能够让神经网络学习非常复杂的函数。激活函数的种类也非常丰富，从最早的sigmoid、tanh，到后来的ReLU、LeakyReLU、ELU等，再到最近的GELU、SE-ReLU、SiLU等，每种激活函数都有其独特的优点和适用场景。</p><p>在本篇文章中，我们将对神经网络中常见的激活函数进行总结和介绍，同时也会介绍一些新兴的激活函数，帮助读者了解它们的特点和使用方法，以便在实际应用中能够选择合适的激活函数来提升神经网络的性能。</p><h3 id="常见的激活函数"><a href="#常见的激活函数" class="headerlink" title="常见的激活函数"></a>常见的激活函数</h3><p>以下是一些常见的激活函数：</p><ul><li><strong>Sigmoid</strong></li><li><strong>Tanh</strong></li><li><strong>ReLU</strong></li><li><strong>LeakyReLU</strong></li><li><strong>ELU</strong></li></ul><h3 id="新兴的激活函数"><a href="#新兴的激活函数" class="headerlink" title="新兴的激活函数"></a>新兴的激活函数</h3><p>以下是一些新兴的激活函数：</p><ul><li><strong>GELU</strong></li><li><strong>SE-ReLU</strong></li><li><strong>SiLU</strong></li></ul><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>神经网络中的激活函数是非常重要的组成部分，它的作用是将神经元的输入信号转换为输出信号，从而实现神经网络的非线性映射。激活函数的意义在于它能够引入非线性特性，使得神经网络可以拟合非常复杂的函数，从而提高了神经网络的表达能力和预测性能。</p><p>具体来说，激活函数的作用有以下几个方面：</p><ol><li><strong>引入非线性特性</strong>：激活函数能够将神经元的输入信号转换为输出信号，从而引入非线性特性，使得神经网络可以拟合非常复杂的函数。</li><li><strong>压缩输出范围</strong>：激活函数能够将神经元的输出范围压缩到一定的范围内，这有助于防止神经元输出的值过大或过小，从而提高了神经网络的稳定性和泛化性能。</li><li><strong>增加网络深度</strong>：激活函数能够增加神经网络的深度，从而提高了神经网络的表达能力和预测性能。</li><li><strong>改善梯度消失问题</strong>：激活函数能够改善神经网络中的梯度消失问题，从而提高了神经网络的训练效率和收敛速度。</li></ol><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><h3 id="sigmoid函数"><a href="#sigmoid函数" class="headerlink" title="sigmoid函数"></a>sigmoid函数</h3><p>sigmoid函数是神经网络中最早也是最常用的激活函数之一，它的特点是将输入值映射到0到1之间的连续范围内，输出值具有良好的可解释性，但是它在梯度消失和输出饱和等问题上表现不佳。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sigmoid</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.</span> / (<span class="number">1.</span> + np.exp(-x))</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/littlepenguin66/webImage/sigmoid.jpg" alt="Sigmoid"></p><h3 id="ReLU函数"><a href="#ReLU函数" class="headerlink" title="ReLU函数"></a>ReLU函数</h3><p>ReLU函数是当前最常用的激活函数之一，它的特点是简单、快速，并且在许多情况下表现出色。ReLU函数将负数输入映射到0，将正数输入保留不变，因此在训练过程中可以避免梯度消失的问题。但是ReLU函数在输入为负数时输出为0，这可能导致神经元死亡，因此后续的改进版本LeakyReLU得到了广泛的应用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ReLU</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> np.maximum(<span class="number">0</span>, x)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/littlepenguin66/webImage/ReLU.jpg" alt="ReLU"></p><h3 id="LeakyReLU函数"><a href="#LeakyReLU函数" class="headerlink" title="LeakyReLU函数"></a>LeakyReLU函数</h3><p>LeakyReLU函数是ReLU函数的改进版本，它在输入为负数时输出一个小的负数，从而避免了ReLU函数可能导致神经元死亡的问题。LeakyReLU函数的优点是简单、快速，并且在许多情况下表现出色，但是其超参数需要手动调整，因此在实际应用中需要进行一定的调试。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">LeakyReLU</span>(<span class="params">x, alpha=<span class="number">0.1</span></span>):</span><br><span class="line">    <span class="keyword">return</span> np.maximum(alpha*x, x)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/littlepenguin66/webImage/LeakyReLU.jpg" alt="LeakyReLU"></p><h3 id="Tanh函数"><a href="#Tanh函数" class="headerlink" title="Tanh函数"></a>Tanh函数</h3><p>Tanh函数是一种具有S形状的激活函数，其特点是将输入值映射到-1到1之间的连续范围内，输出值也具有良好的可解释性。Tanh函数在某些情况下可以表现出色，但是它也存在梯度消失和输出饱和等问题，因此在深度神经网络中使用并不广泛。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Tanh</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> np.tanh(x)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/littlepenguin66/webImage/tanh.jpg" alt="Tanh"></p><h3 id="Softmax函数"><a href="#Softmax函数" class="headerlink" title="Softmax函数"></a>Softmax函数</h3><p>Softmax函数是一种常用于多分类问题的激活函数，它将输入值映射到0到1之间的概率分布，可以将神经网络的输出转换为各个类别的概率值。Softmax函数的优点是简单、易于理解，并且在多分类问题中表现出色，但是它也存在梯度消失和输出饱和等问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Softmax</span>(<span class="params">x</span>):</span><br><span class="line">    exp_x = np.exp(x)</span><br><span class="line">    <span class="keyword">return</span> exp_x / np.<span class="built_in">sum</span>(exp_x, axis=<span class="number">0</span>, keepdims=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/littlepenguin66/webImage/softmax.jpg" alt="SoftMax"></p><h3 id="GELU函数"><a href="#GELU函数" class="headerlink" title="GELU函数"></a>GELU函数</h3><p>GELU函数是一种近年来提出的激活函数，它的特点是在ReLU函数的基础</p><p>上引入了高斯误差线性单元，从而在某些情况下能够表现出色。GELU函数具有平滑的非线性特性，可以避免ReLU函数可能导致的神经元死亡问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">GELU</span>(<span class="params">x</span>):</span><br><span class="line">    cdf = <span class="number">0.5</span> * (<span class="number">1.0</span> + np.tanh((np.sqrt(<span class="number">2</span> / np.pi) * (x + <span class="number">0.044715</span> * np.power(x, <span class="number">3</span>)))))</span><br><span class="line">    <span class="keyword">return</span> x * cdf</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/littlepenguin66/webImage/GeLU.jpg" alt="GeLU"></p><h3 id="SE-ReLU函数"><a href="#SE-ReLU函数" class="headerlink" title="SE_ReLU函数"></a>SE_ReLU函数</h3><p>SE_ReLU函数是一种近年来提出的激活函数，它的特点是在ReLU函数的基础上引入了Sigmoid函数和Exponential函数，从而能够增加神经元的表达能力。SE_ReLU函数具有非常好的平滑性和可解释性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">SE_ReLU</span>(<span class="params">x, alpha=<span class="number">0.1</span>, beta=<span class="number">10</span></span>):</span><br><span class="line">    <span class="keyword">return</span> np.where(x &gt; <span class="number">0</span>, x + alpha * x * np.exp(-beta * x), x)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/littlepenguin66/webImage/SE_ReLU.jpg" alt="SE_ReLU"></p><h3 id="SiLU函数"><a href="#SiLU函数" class="headerlink" title="SiLU函数"></a>SiLU函数</h3><p>SiLU函数是一种近年来提出的激活函数，它的特点是在sigmoid函数的基础上引入了自身的输入，从而能够表现出更好的非线性特性。SiLU函数具有非常好的平滑性和可解释性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">SE_ReLU</span>(<span class="params">x, alpha=<span class="number">0.1</span>, beta=<span class="number">10</span></span>):</span><br><span class="line">    <span class="keyword">return</span> np.where(x &gt; <span class="number">0</span>, x + alpha * x * np.exp(-beta * x), x)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/littlepenguin66/webImage/SiLU.jpg" alt="SiLU"></p><h3 id="DynamicShiftMax-DynamicReLU-A-DynamicReLU-B函数"><a href="#DynamicShiftMax-DynamicReLU-A-DynamicReLU-B函数" class="headerlink" title="DynamicShiftMax &amp; DynamicReLU_A &amp; DynamicReLU_B函数"></a>DynamicShiftMax &amp; DynamicReLU_A &amp; DynamicReLU_B函数</h3><p>DynamicShiftMax函数是一种近年来提出的激活函数，它的特点是在ReLU函数的基础上引入了动态偏移量，从而能够增加神经元的表达能力。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">DynamicShiftMax</span>(<span class="params">x, alpha=<span class="number">0.1</span></span>):</span><br><span class="line">    <span class="keyword">return</span> np.maximum(x, x + alpha * np.<span class="built_in">max</span>(x, axis=<span class="number">0</span>, keepdims=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DynamicReLU_A</span>(<span class="params">x, alpha=<span class="number">0.1</span></span>):</span><br><span class="line">    <span class="keyword">return</span> np.maximum(x, x + alpha * np.mean(x, axis=<span class="number">0</span>, keepdims=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DynamicReLU_B</span>(<span class="params">x, alpha=<span class="number">0.1</span></span>):</span><br><span class="line">    <span class="keyword">return</span> np.maximum(x, x + alpha * np.std(x, axis=<span class="number">0</span>, keepdims=<span class="literal">True</span>))</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/littlepenguin66/webImage/DSM%26DRLA%26DRLB.jpg" alt="DSM%26DRLA%26DRLB"></p><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><p>我们采用控制变量法进行激活函数的推理速度测试，x为输入，范围为-1到1之间的十万个数据，运行次数为100计算激活函数的计算耗时。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    x = np.linspace(-<span class="number">1</span>, <span class="number">1</span>, <span class="number">100000</span>)</span><br><span class="line">    t1 = time.time()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        y = sigmoid(x)</span><br><span class="line">    t2 = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">float</span>(t2 - t1))</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/littlepenguin66/webImage/FET.jpg" alt="FunctionExecutionTime"></p><p>完整代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sigmoid</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.</span> / (<span class="number">1.</span> + np.exp(-x))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ReLU</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> np.maximum(<span class="number">0</span>, x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LeakyReLU</span>(<span class="params">x, alpha=<span class="number">0.1</span></span>):</span><br><span class="line">    <span class="keyword">return</span> np.maximum(alpha * x, x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Tanh</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> np.tanh(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Softmax</span>(<span class="params">x</span>):</span><br><span class="line">    exp_x = np.exp(x)</span><br><span class="line">    <span class="keyword">return</span> exp_x / np.<span class="built_in">sum</span>(exp_x, axis=<span class="number">0</span>, keepdims=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GELU</span>(<span class="params">x</span>):</span><br><span class="line">    cdf = <span class="number">0.5</span> * (<span class="number">1.0</span> + np.tanh((np.sqrt(<span class="number">2</span> / np.pi) * (x + <span class="number">0.044715</span> * np.power(x, <span class="number">3</span>)))))</span><br><span class="line">    <span class="keyword">return</span> x * cdf</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SE_ReLU</span>(<span class="params">x, alpha=<span class="number">0.1</span>, beta=<span class="number">10</span></span>):</span><br><span class="line">    <span class="keyword">return</span> np.where(x &gt; <span class="number">0</span>, x + alpha * x * np.exp(-beta * x), x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SE_ReLU</span>(<span class="params">x, alpha=<span class="number">0.1</span>, beta=<span class="number">10</span></span>):</span><br><span class="line">    <span class="keyword">return</span> np.where(x &gt; <span class="number">0</span>, x + alpha * x * np.exp(-beta * x), x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DynamicShiftMax</span>(<span class="params">x, alpha=<span class="number">0.1</span></span>):</span><br><span class="line">    <span class="keyword">return</span> np.maximum(x, x + alpha * np.<span class="built_in">max</span>(x, axis=<span class="number">0</span>, keepdims=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DynamicReLU_A</span>(<span class="params">x, alpha=<span class="number">0.1</span></span>):</span><br><span class="line">    <span class="keyword">return</span> np.maximum(x, x + alpha * np.mean(x, axis=<span class="number">0</span>, keepdims=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DynamicReLU_B</span>(<span class="params">x, alpha=<span class="number">0.1</span></span>):</span><br><span class="line">    <span class="keyword">return</span> np.maximum(x, x + alpha * np.std(x, axis=<span class="number">0</span>, keepdims=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">name = [sigmoid, ReLU, LeakyReLU, Tanh, Softmax, GELU, SE_ReLU, DynamicShiftMax, DynamicReLU_A, DynamicReLU_B]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    x = np.linspace(-<span class="number">1</span>, <span class="number">1</span>, <span class="number">1000000</span>)</span><br><span class="line">    times = []  <span class="comment"># 创建一个空列表来存储函数名称和时间</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> name:</span><br><span class="line">        t1 = time.perf_counter()  <span class="comment"># 使用perf_counter</span></span><br><span class="line">        y = n(x)</span><br><span class="line">        t2 = time.perf_counter()  <span class="comment"># 使用perf_counter</span></span><br><span class="line">        times.append((n.__name__, <span class="built_in">float</span>(t2 - t1)))  <span class="comment"># 将函数名称和时间作为元组添加到列表中</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> n, t <span class="keyword">in</span> times:  <span class="comment"># 遍历列表并打印每个函数名称和时间</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;n&#125;</span>: <span class="subst">&#123;t&#125;</span>&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 用plot绘制times列表中的数据</span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">5</span>))</span><br><span class="line">plt.bar(*<span class="built_in">zip</span>(*times)) <span class="comment"># 使用zip(*times)将元组列表转换为两个元组列表</span></span><br><span class="line">plt.ylabel(<span class="string">&#x27;Time (s)&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Activation Functions&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 芝士学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>页面配置</title>
      <link href="/Markdown/%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/"/>
      <url>/Markdown/%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="🧱-Front-matter-的基本认识"><a href="#🧱-Front-matter-的基本认识" class="headerlink" title="🧱 Front-matter 的基本认识"></a>🧱 Front-matter 的基本认识</h3><p>Front-matter 是 markdown 文件最上方以 — 分隔的区域，用于指定个别档案的变数。其中又分为两种 markdown 里</p><ul><li><strong>Page Front-matter</strong> 用于页面配置</li><li><strong>Post Front-matter</strong> 用于文章页配置</li></ul><h4 id="Page-Front-matter"><a href="#Page-Front-matter" class="headerlink" title="Page Front-matter"></a>Page Front-matter</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">【必需】页面标题</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">【必需】页面创建日期</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">【必需】标签、分类、关于、音乐馆、友情链接、相册、相册详情、朋友圈、即刻页面需要配置</span></span><br><span class="line"><span class="attr">updated:</span> <span class="string">【可选】页面更新日期</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">【可选】页面描述</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">【可选】页面关键字</span></span><br><span class="line"><span class="attr">comments:</span> <span class="string">【可选】显示页面评论模块(默认</span> <span class="literal">true</span><span class="string">)</span></span><br><span class="line"><span class="attr">top_img:</span> <span class="string">【可选】页面顶部图片</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="string">【可选】显示</span> <span class="string">mathjax(当设置</span> <span class="string">mathjax</span> <span class="string">的</span> <span class="attr">per_page:</span> <span class="literal">false</span> <span class="string">时，才需要配置，默认</span> <span class="literal">false</span><span class="string">)</span></span><br><span class="line"><span class="attr">katex:</span> <span class="string">【可选】显示</span> <span class="string">katex(当设置</span> <span class="string">katex</span> <span class="string">的</span> <span class="attr">per_page:</span> <span class="literal">false</span> <span class="string">时，才需要配置，默认</span> <span class="literal">false</span><span class="string">)</span></span><br><span class="line"><span class="attr">aside:</span> <span class="string">【可选】显示侧边栏</span> <span class="string">(默认</span> <span class="literal">true</span><span class="string">)</span></span><br><span class="line"><span class="attr">aplayer:</span> <span class="string">【可选】在需要的页面加载</span> <span class="string">aplayer</span> <span class="string">的</span> <span class="string">js</span> <span class="string">和</span> <span class="string">css,请参考文章下面的音乐</span> <span class="string">配置</span></span><br><span class="line"><span class="attr">highlight_shrink:</span> <span class="string">【可选】配置代码框是否展开(true/false)(默认为设置中</span> <span class="string">highlight_shrink</span> <span class="string">的配置)</span></span><br><span class="line"><span class="attr">top_single_background:</span> <span class="string">【可选】部分页面的顶部模块背景图片</span></span><br></pre></td></tr></table></figure><h4 id="Post-Front-matter"><a href="#Post-Front-matter" class="headerlink" title="Post Front-matter"></a>Post Front-matter</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">【必需】文章标题</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">【必需】文章创建日期</span></span><br><span class="line"><span class="attr">updated:</span> <span class="string">【可选】文章更新日期</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">【可选】文章标签</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">【可选】文章分类</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">【可选】文章关键字</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">【可选】文章描述</span></span><br><span class="line"><span class="attr">top_img:</span> <span class="string">【可选】文章顶部图片</span></span><br><span class="line"><span class="attr">cover:</span> <span class="string">【可选】文章缩略图(如果没有设置</span> <span class="string">top_img,文章页顶部将显示缩略图，可设为</span> <span class="literal">false</span><span class="string">/图片地址/留空)</span></span><br><span class="line"><span class="attr">comments:</span> <span class="string">【可选】显示文章评论模块(默认</span> <span class="literal">true</span><span class="string">)</span></span><br><span class="line"><span class="attr">toc:</span> <span class="string">【可选】显示文章</span> <span class="string">TOC(默认为设置中</span> <span class="string">toc</span> <span class="string">的</span> <span class="string">enable</span> <span class="string">配置)</span></span><br><span class="line"><span class="attr">toc_number:</span> <span class="string">【可选】显示</span> <span class="string">toc_number(默认为设置中</span> <span class="string">toc</span> <span class="string">的</span> <span class="string">number</span> <span class="string">配置)</span></span><br><span class="line"><span class="attr">toc_style_simple:</span> <span class="string">【可选】显示</span> <span class="string">toc</span> <span class="string">简洁模式</span></span><br><span class="line"><span class="attr">copyright:</span> <span class="string">【可选】显示文章版权模块(默认为设置中</span> <span class="string">post_copyright</span> <span class="string">的</span> <span class="string">enable</span> <span class="string">配置)</span></span><br><span class="line"><span class="attr">copyright_author:</span> <span class="string">【可选】文章版权模块的文章作者</span></span><br><span class="line"><span class="attr">copyright_author_href:</span> <span class="string">【可选】文章版权模块的文章作者链接</span></span><br><span class="line"><span class="attr">copyright_url:</span> <span class="string">【可选】文章版权模块的文章链接链接</span></span><br><span class="line"><span class="attr">copyright_info:</span> <span class="string">【可选】文章版权模块的版权声明文字</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="string">【可选】显示</span> <span class="string">mathjax(当设置</span> <span class="string">mathjax</span> <span class="string">的</span> <span class="attr">per_page:</span> <span class="literal">false</span> <span class="string">时，才需要配置，默认</span> <span class="literal">false</span><span class="string">)</span></span><br><span class="line"><span class="attr">katex:</span> <span class="string">【可选】显示</span> <span class="string">katex(当设置</span> <span class="string">katex</span> <span class="string">的</span> <span class="attr">per_page:</span> <span class="literal">false</span> <span class="string">时，才需要配置，默认</span> <span class="literal">false</span><span class="string">)</span></span><br><span class="line"><span class="attr">aplayer:</span> <span class="string">【可选】在需要的页面加载</span> <span class="string">aplayer</span> <span class="string">的</span> <span class="string">js</span> <span class="string">和</span> <span class="string">css,请参考文章下面的音乐</span> <span class="string">配置</span></span><br><span class="line"><span class="attr">highlight_shrink:</span> <span class="string">【可选】配置代码框是否展开(true/false)(默认为设置中</span> <span class="string">highlight_shrink</span> <span class="string">的配置)</span></span><br><span class="line"><span class="attr">aside:</span> <span class="string">【可选】显示侧边栏</span> <span class="string">(默认</span> <span class="literal">true</span><span class="string">)</span></span><br><span class="line"><span class="attr">swiper_index:</span> <span class="string">【可选】首页轮播图配置</span> <span class="string">index</span> <span class="string">索引，数字越小越靠前</span></span><br><span class="line"><span class="attr">top_group_index:</span> <span class="string">【可选】首页右侧卡片组配置,</span> <span class="string">数字越小越靠前</span></span><br><span class="line"><span class="attr">ai:</span> <span class="string">【可选】文章ai摘要</span></span><br><span class="line"><span class="attr">main_color:</span> <span class="string">【可选】文章主色，必须是16进制颜色且有6位，不可缩减，例如#ffffff</span> <span class="string">不可写成#fff</span></span><br></pre></td></tr></table></figure><p><strong>使用方法</strong>：</p><ol><li>在Markdown文件的最上方添加Front-matter区域，以<code>---</code>分隔。</li><li>根据需要配置Page Front-matter或Post Front-matter中的参数。</li><li>可选参数可以根据个人需求添加，不必全部包含。</li><li>特定页面的Front-matter配置（如swiper_index和top_group_index）可以实现轮播图和推荐卡片的显示。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>anzhiyu添加新页面基于已有模板</title>
      <link href="/Markdown/anzhiyu%E6%B7%BB%E5%8A%A0%E6%96%B0%E9%A1%B5%E9%9D%A2%E5%9F%BA%E4%BA%8E%E5%B7%B2%E6%9C%89%E6%A8%A1%E6%9D%BF/"/>
      <url>/Markdown/anzhiyu%E6%B7%BB%E5%8A%A0%E6%96%B0%E9%A1%B5%E9%9D%A2%E5%9F%BA%E4%BA%8E%E5%B7%B2%E6%9C%89%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>anzhiyu</code>主题仅支持添加现有模板，例如<code>album</code>、<code>essay</code>等。如果您使用以下命令创建新页面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page pageName</span><br></pre></td></tr></table></figure><p>由于<code>./themes/anzhiyu/layout/page.pug</code>中的以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">block content</span><br><span class="line">  #page</span><br><span class="line">    if top_img === false &amp;&amp; !page.top_single</span><br><span class="line">      h1.page-title= page.title</span><br><span class="line">    case page.type</span><br><span class="line">      when &#x27;tags&#x27;</span><br><span class="line">        include includes/page/tags.pug</span><br><span class="line">      when &#x27;link&#x27;</span><br><span class="line">        include includes/page/flink.pug</span><br><span class="line">      when &#x27;categories&#x27;</span><br><span class="line">        include includes/page/categories.pug</span><br><span class="line">      when &#x27;essay&#x27;</span><br><span class="line">        include includes/page/essay.pug</span><br><span class="line">      when &#x27;room&#x27;</span><br><span class="line">        include includes/page/room.pug</span><br><span class="line">      when &#x27;about&#x27;</span><br><span class="line">        include includes/page/about.pug</span><br><span class="line">      when &#x27;album&#x27;</span><br><span class="line">        include includes/page/album.pug</span><br><span class="line">      when &#x27;fcircle&#x27;</span><br><span class="line">        include includes/page/fcircle.pug</span><br><span class="line">      when &#x27;album_detail&#x27;</span><br><span class="line">        include includes/page/album_detail.pug</span><br><span class="line">      when &#x27;music&#x27;</span><br><span class="line">        include includes/page/music.pug</span><br><span class="line">      when &#x27;equipment&#x27;</span><br><span class="line">        include includes/page/equipment.pug</span><br><span class="line">      default</span><br><span class="line">        include includes/page/default-page.pug</span><br></pre></td></tr></table></figure><p>新页面将使用<code>default-page</code>的JavaScript和CSS，这可能会导致外观不尽如人意（除非您有能力自行编写）。因此，我建议您基于现有模板进行修改。在这里，我们将使用模板库中的<code>equipment</code>页面作为示例进行自定义修改。</p><h4 id="具体方法如下："><a href="#具体方法如下：" class="headerlink" title="具体方法如下："></a>具体方法如下：</h4><ol><li><p>找到以下文件：</p><ul><li><code>themes\anzhiyu\layout\page.pug</code></li><li><code>themes\anzhiyu\layout\includes\page\equipment.pug</code></li><li><code>themes\anzhiyu\source\css\_page\equipment.styl</code></li></ul></li><li><p>在<code>page.pug</code>中添加以下代码：</p></li></ol> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#page</span><br><span class="line">  if top_img === false &amp;&amp; !page.top_single</span><br><span class="line">    h1.page-title= page.title</span><br><span class="line">  case page.type</span><br><span class="line">    when &#x27;tags&#x27;</span><br><span class="line">      include includes/page/tags.pug</span><br><span class="line">    when &#x27;link&#x27;</span><br><span class="line">      include includes/page/flink.pug</span><br><span class="line">    when &#x27;categories&#x27;</span><br><span class="line">      include includes/page/categories.pug</span><br><span class="line">    when &#x27;essay&#x27;</span><br><span class="line">      include includes/page/essay.pug</span><br><span class="line">    when &#x27;room&#x27;</span><br><span class="line">      include includes/page/room.pug</span><br><span class="line">    when &#x27;about&#x27;</span><br><span class="line">      include includes/page/about.pug</span><br><span class="line">    when &#x27;album&#x27;</span><br><span class="line">      include includes/page/album.pug</span><br><span class="line">    when &#x27;fcircle&#x27;</span><br><span class="line">      include includes/page/fcircle.pug</span><br><span class="line">    when &#x27;album_detail&#x27;</span><br><span class="line">      include includes/page/album_detail.pug</span><br><span class="line">    when &#x27;music&#x27;</span><br><span class="line">      include includes/page/music.pug</span><br><span class="line">    when &#x27;equipment&#x27;</span><br><span class="line">      include includes/page/equipment.pug</span><br><span class="line">    when &#x27;pageName&#x27;  // 新加的代码</span><br><span class="line">      include includes/page/pageName.pug  // 新加的代码</span><br><span class="line">    default</span><br><span class="line">      include includes/page/default-page.pug</span><br></pre></td></tr></table></figure><ol start="3"><li><p>接着，对<code>equipment.pug</code>进行操作：</p><ul><li><p>新建一个文件<code>pageName.pug</code>。</p></li><li><p>复制<code>equipment.pug</code>中的所有代码。</p></li><li><p>将所有的<code>equipment</code>关键字替换为<code>pageName</code></p></li></ul></li><li><p>对<code>equipment.styl</code>重复上述步骤。</p></li></ol><p>完成以上步骤后，您就可以开始编辑新的<code>pageName.yml</code>文件了。</p><ol start="5"><li>直接把<code>equipment.yml</code>复制一份到新文件<code>pageName.yml</code>，并且把所有的<code>equipment</code>字样全部替换为<code>pageName</code>，就可以根据<code>equipment</code>的编辑模式对<code>pageName</code>页面进行编辑了。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
